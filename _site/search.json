[
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "library(vroom)\nlibrary(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.4     ✔ readr     2.1.5\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.1\n#&gt; ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n#&gt; ✔ purrr     1.0.2     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ readr::col_character()   masks vroom::col_character()\n#&gt; ✖ readr::col_date()        masks vroom::col_date()\n#&gt; ✖ readr::col_datetime()    masks vroom::col_datetime()\n#&gt; ✖ readr::col_double()      masks vroom::col_double()\n#&gt; ✖ readr::col_factor()      masks vroom::col_factor()\n#&gt; ✖ readr::col_guess()       masks vroom::col_guess()\n#&gt; ✖ readr::col_integer()     masks vroom::col_integer()\n#&gt; ✖ readr::col_logical()     masks vroom::col_logical()\n#&gt; ✖ readr::col_number()      masks vroom::col_number()\n#&gt; ✖ readr::col_skip()        masks vroom::col_skip()\n#&gt; ✖ readr::col_time()        masks vroom::col_time()\n#&gt; ✖ readr::cols()            masks vroom::cols()\n#&gt; ✖ readr::date_names_lang() masks vroom::date_names_lang()\n#&gt; ✖ readr::default_locale()  masks vroom::default_locale()\n#&gt; ✖ dplyr::filter()          masks stats::filter()\n#&gt; ✖ readr::fwf_cols()        masks vroom::fwf_cols()\n#&gt; ✖ readr::fwf_empty()       masks vroom::fwf_empty()\n#&gt; ✖ readr::fwf_positions()   masks vroom::fwf_positions()\n#&gt; ✖ readr::fwf_widths()      masks vroom::fwf_widths()\n#&gt; ✖ dplyr::lag()             masks stats::lag()\n#&gt; ✖ readr::locale()          masks vroom::locale()\n#&gt; ✖ readr::output_column()   masks vroom::output_column()\n#&gt; ✖ readr::problems()        masks vroom::problems()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ncol_types &lt;- list(\n  id = col_character(),\n  type = col_character(),\n  number = col_character(),\n  country = col_character(),\n  date = col_date(\"%Y-%m-%d\"),\n  abstract = col_character(),\n  title = col_character(),\n  kind = col_character(),\n  num_claims = col_double(),\n  filename = col_character(),\n  withdrawn = col_double()\n)\n\npatent &lt;- vroom(\n            file       = \"../../../ds_data/patent.tsv\", \n            delim      = \"\\t\", \n            col_types  = col_types,\n            na         = c(\"\", \"NA\", \"NULL\")\n        )\n\n#&gt; Warning: The following named parsers don't match the column names: type,\n#&gt; number, country, abstract, title, kind, filename, withdrawn\n\ncol_types &lt;- list(\n  id = col_character(),\n  type = col_character(),\n  organization = col_character()\n)\n\nassignee &lt;- vroom(\n            file       = \"../../../ds_data/assignee.tsv\", \n            delim      = \"\\t\", \n            col_types  = col_types,\n            na         = c(\"\", \"NA\", \"NULL\")\n        )\n\ncol_types &lt;- list(\n  patent_id = col_character(),\n  assignee_id = col_character()\n)\n\npatent_assignee &lt;- vroom(\n            file       = \"../../../ds_data/patent_assignee.tsv\", \n            delim      = \"\\t\", \n            col_types  = col_types,\n            na         = c(\"\", \"NA\", \"NULL\")\n        )\n\ncol_types &lt;- list(\n  patent_id = col_character(),\n  mainclass_id = col_character(),\n  sequence = col_character()\n)\n\nuspc &lt;- vroom(\n            file       = \"../../../ds_data/uspc.tsv\", \n            delim      = \"\\t\", \n            col_types  = col_types,\n            na         = c(\"\", \"NA\", \"NULL\")\n        )"
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "library(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.4     ✔ readr     2.1.5\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.1\n#&gt; ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n#&gt; ✔ purrr     1.0.2     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(lubridate)\nlibrary(ggrepel)\n\ncovid_data_tbl &lt;- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\")\n\n#&gt; Rows: 399319 Columns: 67\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr   (4): iso_code, continent, location, tests_units\n#&gt; dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#&gt; date  (1): date\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncovid = covid_data_tbl %&gt;% select(continent, location, date, new_cases)\n\neuropean_countries &lt;- c(\"France\", \"Germany\", \"Spain\", \"United Kingdom\")\ncovid_filtered = covid %&gt;% filter(location %in% european_countries | location == \"United States\") %&gt;% filter(date&lt;'2022-04-19')\n\ncovid_data_plot &lt;- covid_filtered %&gt;%\n  group_by(location, date) %&gt;%\n  summarize(cumulative_cases = sum(new_cases, na.rm = TRUE)) %&gt;%\n  mutate(cumulative_cases = cumsum(cumulative_cases))\n\n#&gt; `summarise()` has grouped output by 'location'. You can override using the\n#&gt; `.groups` argument.\n\n# Plot the data\nggplot(covid_data_plot, aes(x = date, y = cumulative_cases, group = location, colour = location)) +\n  geom_line()+ #color = \"#00BFC4\") + \n  scale_x_date(date_breaks = \"1 month\", date_labels = \"%b %y\") +\n  scale_y_continuous(labels = scales::comma) +\n  labs(x = \"Date\", y = \"Cumulative Cases\", title = \"COVID-19 confirmed cases worldwide\") +\n  theme_minimal() +\n  geom_label_repel(\n    aes(label = ifelse(date == max(date), as.character(cumulative_cases), \"\")),\n    nudge_x = 300,\n    nudge_y = 3000,\n    size = 4\n  ) +\n  theme(axis.text.x = element_text(angle = 70, hjust = 1))\n\n\n\n\n\n\n\n\nlibrary(maps)\n\nworld &lt;- map_data(\"world\")\n\n\n# Calculate mortality rate as deaths/population\n# due to memory limit, I only showed the selected countries\n#selected_countries &lt;- c(\"France\", \"Germany\", \"United Kingdom\", \"China\", \"United States\")\nselected_countries &lt;- c(\"Germany\")\n\ncovid_data_f2 &lt;- covid_data_tbl %&gt;% \n  filter(location %in% selected_countries  ) %&gt;% \n  filter(date&lt;'2022-04-19') %&gt;%\n  mutate(mortality_rate = total_deaths / population)\n\ncovid_data_f2 &lt;- covid_data_f2 %&gt;%\n  mutate(location = case_when(\n    location == \"United Kingdom\" ~ \"UK\",\n    location == \"United States\" ~ \"USA\",\n    location == \"Democratic Republic of Congo\" ~ \"Democratic Republic of the Congo\",\n    TRUE ~ location\n  )) %&gt;%\n  distinct()\n\n# Join the COVID-19 data with the world map data\nplot_data &lt;- world %&gt;%\n  left_join(covid_data_f2, by = c(\"region\" = \"location\"))\n\n#&gt; Warning in left_join(., covid_data_f2, by = c(region = \"location\")): Detected an unexpected many-to-many relationship between `x` and `y`.\n#&gt; ℹ Row 34099 of `x` matches multiple rows in `y`.\n#&gt; ℹ Row 1 of `y` matches multiple rows in `x`.\n#&gt; ℹ If a many-to-many relationship is expected, set `relationship =\n#&gt;   \"many-to-many\"` to silence this warning.\n\n# Plot the data\nggplot(plot_data) +\n  geom_map(aes(map_id = region, fill = mortality_rate), map = world) +\n  expand_limits(x = world$long, y = world$lat) +\n  scale_fill_continuous(low = \"red\", high = \"black\", na.value = \"grey50\", label = scales::percent) +\n  labs(fill = \"Mortality Rate\", title = \"Confirmed COVID-19 Mortality\") +\n  theme_minimal()\n\n\n\n\n\n\n\nDue to the following error, I couldn’t map all the countries. I hope the above output could at least show my attempt.\nprocessing file: 04_data_visualization.qmd |…………………………………………….| 100% [unnamed-chunk-2] Quitting from lines at lines 44-81 [unnamed-chunk-2] (04_data_visualization.qmd) Error in lazyLoadDBinsertVariable(): ! long vectors not supported yet: /Volumes/Builds/R4/R-4.4.0/src/main/connections.c:6261"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "# Data Science at TUHH ------------------------------------------------------\n# SALES ANALYSIS ----\n\n# 1.0 Load libraries ----\nlibrary(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.4     ✔ readr     2.1.5\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.1\n#&gt; ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n#&gt; ✔ purrr     1.0.2     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(readxl)\n\n# 2.0 Importing Files ----\nbikes_tbl      &lt;- read_excel(path = \"../../../ds_data/01_bike_sales/01_raw_data/bikes.xlsx\")\norderlines_tbl &lt;- read_excel(\"../../../ds_data/01_bike_sales/01_raw_data/orderlines.xlsx\")\n\n#&gt; New names:\n#&gt; • `` -&gt; `...1`\n\nbikeshops_tbl  &lt;- read_excel(\"../../../ds_data/01_bike_sales/01_raw_data/bikeshops.xlsx\")\n\n\n# 3.0 Examining Data ----\n\n\n# 4.0 Joining Data ----\nleft_join(orderlines_tbl, bikes_tbl, by = c(\"product.id\" = \"bike.id\"))\n\n\n\n  \n\n\nbike_orderlines_joined_tbl &lt;- orderlines_tbl %&gt;%\n        left_join(bikes_tbl, by = c(\"product.id\" = \"bike.id\")) %&gt;%\n        left_join(bikeshops_tbl, by = c(\"customer.id\" = \"bikeshop.id\"))\n\nbike_orderlines_joined_tbl %&gt;% glimpse()\n\n#&gt; Rows: 15,644\n#&gt; Columns: 19\n#&gt; $ ...1           &lt;chr&gt; \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"…\n#&gt; $ order.id       &lt;dbl&gt; 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7…\n#&gt; $ order.line     &lt;dbl&gt; 1, 2, 1, 2, 1, 2, 3, 4, 5, 1, 1, 2, 3, 4, 1, 2, 3, 4, 1…\n#&gt; $ order.date     &lt;dttm&gt; 2015-01-07, 2015-01-07, 2015-01-10, 2015-01-10, 2015-0…\n#&gt; $ customer.id    &lt;dbl&gt; 2, 2, 10, 10, 6, 6, 6, 6, 6, 22, 8, 8, 8, 8, 16, 16, 16…\n#&gt; $ product.id     &lt;dbl&gt; 2681, 2411, 2629, 2137, 2367, 1973, 2422, 2655, 2247, 2…\n#&gt; $ quantity       &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1…\n#&gt; $ model          &lt;chr&gt; \"Spectral CF 7 WMN\", \"Ultimate CF SLX Disc 8.0 ETAP\", \"…\n#&gt; $ model.year     &lt;dbl&gt; 2021, 2020, 2021, 2019, 2020, 2020, 2020, 2021, 2020, 2…\n#&gt; $ frame.material &lt;chr&gt; \"carbon\", \"carbon\", \"carbon\", \"carbon\", \"aluminium\", \"c…\n#&gt; $ weight         &lt;dbl&gt; 13.80, 7.44, 14.06, 8.80, 11.50, 8.80, 8.20, 8.85, 14.4…\n#&gt; $ price          &lt;dbl&gt; 3119, 5359, 2729, 1749, 1219, 1359, 2529, 1559, 3899, 6…\n#&gt; $ category       &lt;chr&gt; \"Mountain - Trail - Spectral\", \"Road - Race - Ultimate\"…\n#&gt; $ gender         &lt;chr&gt; \"female\", \"unisex\", \"unisex\", \"unisex\", \"unisex\", \"unis…\n#&gt; $ url            &lt;chr&gt; \"https://www.canyon.com/en-de/mountain-bikes/trail-bike…\n#&gt; $ name           &lt;chr&gt; \"AlexandeRad\", \"AlexandeRad\", \"WITT-RAD\", \"WITT-RAD\", \"…\n#&gt; $ location       &lt;chr&gt; \"Hamburg, Hamburg\", \"Hamburg, Hamburg\", \"Bremen, Bremen…\n#&gt; $ lat            &lt;dbl&gt; 53.57532, 53.57532, 53.07379, 53.07379, 48.78234, 48.78…\n#&gt; $ lng            &lt;dbl&gt; 10.015340, 10.015340, 8.826754, 8.826754, 9.180819, 9.1…\n\n#5.0 Wrangling Data ----\n# All actions are chained with the pipe already. You can perform each step separately and use glimpse() or View() to validate your code. Store the result in a variable at the end of the steps.\nbike_orderlines_wrangled_tbl &lt;- bike_orderlines_joined_tbl %&gt;%\n# 5.1 Separate category name and location\nseparate(col    = category,\n         into   = c(\"category.1\", \"category.2\", \"category.3\"),\n         sep    = \" - \") %&gt;%\n         \nseparate(col    = location,\n         into   = c(\"city\", \"state\"),\n         sep    = \", \") %&gt;%         \n\n# 5.2 Add the total price (price * quantity) \n# Add a column to a tibble that uses a formula-style calculation of other columns\nmutate(total.price = price * quantity) %&gt;%\n\n# 5.3 Optional: Reorganize. Using select to grab or remove unnecessary columns\n# 5.3.1 by exact column name\nselect(-...1, -gender) %&gt;%\n\n# 5.3.2 by a pattern\n# You can use the select_helpers to define patterns. \n# Type ?ends_with and click on Select helpers in the documentation\nselect(-ends_with(\".id\")) %&gt;%\n\n# 5.3.3 Actually we need the column \"order.id\". Let's bind it back to the data\nbind_cols(bike_orderlines_joined_tbl %&gt;% select(order.id)) %&gt;% \n\n# 5.3.4 You can reorder the data by selecting the columns in your desired order.\n# You can use select_helpers like contains() or everything()\nselect(order.id, contains(\"order\"), contains(\"model\"), contains(\"category\"),\n       price, quantity, total.price,\n       everything()) %&gt;%\n\n# 5.4 Rename columns because we actually wanted underscores instead of the dots\n# (one at the time vs. multiple at once)\nrename(bikeshop = name) %&gt;%\nset_names(names(.) %&gt;% str_replace_all(\"\\\\.\", \"_\"))\n\n# 6.0 Business Insights ----\n# 6.1 Sales by Loc ----\nlibrary(lubridate)\n\n# Step 1 - Manipulate\nsales_by_loc_tbl = bike_orderlines_wrangled_tbl %&gt;%\nselect(state, total_price) %&gt;%\ngroup_by(state) %&gt;% \nsummarize(sales = sum(total_price)) %&gt;%\nmutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                   decimal.mark = \",\", \n                                   prefix = \"\", \n                                   suffix = \" €\"))\n\nsales_by_loc_tbl\n\n\n\n  \n\n\n\n\n# Step 2 - Visualize\nsales_by_loc_tbl %&gt;%\n\n# Setup canvas with the columns year (x-axis) and sales (y-axis)\nggplot(aes(x = state, y = sales)) +\n\n# Geometries\ngeom_col(fill = \"#2DC6D6\") + # Use geom_col for a bar plot\ngeom_label(aes(label = sales_text)) + # Adding labels to the bars\ngeom_smooth(method = \"lm\", se = FALSE) + # Adding a trendline\n\n# Formatting\n# scale_y_continuous(labels = scales::dollar) + # Change the y-axis. \n# Again, we have to adjust it for euro values\nscale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                  decimal.mark = \",\", \n                                                  prefix = \"\", \n                                                  suffix = \" €\")) +\nlabs(\n  title    = \"Revenue by state\",\n  subtitle = \"Upward Trend\",\n  x = \"\", # Override defaults for x and y\n  y = \"Revenue\"\n) + theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n#&gt; `geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n# 6.2 Sales by Year and Location ----\n\n# Step 1 - Manipulate\nsales_by_year_loc_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\n \n# Select columns and add a year\nselect(order_date, total_price, state) %&gt;%\nmutate(year = year(order_date)) %&gt;%\n\n# Group by and summarize year and main catgegory\ngroup_by(year, state) %&gt;%\nsummarise(sales = sum(total_price)) %&gt;%\nungroup() %&gt;%\n\n# Format $ Text\nmutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                   decimal.mark = \",\", \n                                   prefix = \"\", \n                                   suffix = \" €\"))\n\n#&gt; `summarise()` has grouped output by 'year'. You can override using the\n#&gt; `.groups` argument.\n\nsales_by_year_loc_tbl\n\n\n\n  \n\n\n\n\n# Step 2 - Visualize\nsales_by_year_loc_tbl %&gt;%\n\n# Set up x, y, fill\nggplot(aes(x = year, y = sales, fill = state)) +\n\n# Geometries\ngeom_col() + # Run up to here to get a stacked bar plot\n\n# Facet\nfacet_wrap(~ state) +\n\n# Formatting\nscale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                  decimal.mark = \",\", \n                                                  prefix = \"\", \n                                                  suffix = \" €\")) +\nlabs(\n  title = \"Revenue by year and location\",\n  subtitle = \"Each product category has an upward trend\",\n  fill = \"Main category\" # Changes the legend name\n) + theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n# 7.0 Writing Files ----\n\n# 7.1 Excel ----\nlibrary(\"writexl\")\nbike_orderlines_wrangled_tbl %&gt;%\nwrite_xlsx(\"../../00_data/01_bike_sales/02_wrangled_data/bike_orderlines.xlsx\")\n\n# 7.2 CSV ----\nbike_orderlines_wrangled_tbl %&gt;% \nwrite_csv(\"../../00_data/01_bike_sales/02_wrangled_data/bike_orderlines.csv\")\n\n# 7.3 RDS ----\nbike_orderlines_wrangled_tbl %&gt;% \nwrite_rds(\"../../00_data/01_bike_sales/02_wrangled_data/bike_orderlines.rds\")"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#header-2",
    "href": "content/01_journal/01_tidyverse.html#header-2",
    "title": "Tidyverse",
    "section": "\n2.1 Header 2",
    "text": "2.1 Header 2\nHeader 3\nHeader 4\nHeader 5\nHeader 6"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "url = 'https://v2.jokeapi.dev/joke/Any?format=txt'\n\nlibrary(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.4     ✔ readr     2.1.5\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.1\n#&gt; ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n#&gt; ✔ purrr     1.0.2     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(rvest)\n\n#&gt; \n#&gt; Attaching package: 'rvest'\n#&gt; \n#&gt; The following object is masked from 'package:readr':\n#&gt; \n#&gt;     guess_encoding\n\nhtml &lt;- read_html(url)\nsection &lt;- html |&gt; html_elements(\"p\")\nsection\n\n#&gt; {xml_nodeset (1)}\n#&gt; [1] &lt;p&gt;I stayed up all night wondering where the sun went.\\n\\nThen it dawned  ..."
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My DS Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My DS Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  },
  {
    "objectID": "content/03_other/06_links.html#r-and-r-studio",
    "href": "content/03_other/06_links.html#r-and-r-studio",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual ."
  },
  {
    "objectID": "content/03_other/06_links.html#additional-r-resources",
    "href": "content/03_other/06_links.html#additional-r-resources",
    "title": "Links",
    "section": "",
    "text": "Google is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html#a-joke",
    "href": "content/01_journal/02_data_acquisition.html#a-joke",
    "title": "Data Acquisition",
    "section": "",
    "text": "url = 'https://v2.jokeapi.dev/joke/Any?format=txt'\n\nlibrary(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.4     ✔ readr     2.1.5\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.1\n#&gt; ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n#&gt; ✔ purrr     1.0.2     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(rvest)\n\n#&gt; \n#&gt; Attaching package: 'rvest'\n#&gt; \n#&gt; The following object is masked from 'package:readr':\n#&gt; \n#&gt;     guess_encoding\n\nhtml &lt;- read_html(url)\nsection &lt;- html |&gt; html_elements(\"p\")\nsection\n\n#&gt; {xml_nodeset (1)}\n#&gt; [1] &lt;p&gt;I stayed up all night wondering where the sun went.\\n\\nThen it dawned  ..."
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html#video-data",
    "href": "content/01_journal/02_data_acquisition.html#video-data",
    "title": "Data Acquisition",
    "section": "\n2 Video data",
    "text": "2 Video data\n\nurl &lt;- \"https://web.archive.org/web/20220201012049/https://www.imdb.com/chart/top/\"\nhtml &lt;- read_html(url)\n\ntable &lt;- html |&gt; \n  html_element(\"table\") |&gt; \n  html_table()\n\nratings &lt;- table |&gt;\n  select(\n    rank_title_year = `Rank & Title`,\n    rating = `IMDb Rating`\n  ) |&gt; \n  mutate(\n    rank_title_year = str_replace_all(rank_title_year, \"\\n +\", \" \")\n  ) |&gt; \n  separate_wider_regex(\n    rank_title_year,\n    patterns = c(\n      rank = \"\\\\d+\", \"\\\\. \",\n      title = \".+\", \" +\\\\(\",\n      year = \"\\\\d+\", \"\\\\)\"\n    )\n  )\nratings\n\n\n\n  \n\n\n\n\nhtml |&gt; \n  html_elements(\"td strong\") |&gt; \n  head() |&gt; \n  html_attr(\"title\")\n\n#&gt; [1] \"9.2 based on 2,536,415 user ratings\" \"9.1 based on 1,745,675 user ratings\"\n#&gt; [3] \"9.0 based on 1,211,032 user ratings\" \"9.0 based on 2,486,931 user ratings\"\n#&gt; [5] \"8.9 based on 749,563 user ratings\"   \"8.9 based on 1,295,705 user ratings\""
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#section",
    "href": "content/01_journal/03_data_wrangling.html#section",
    "title": "Data Wrangling",
    "section": "\n1 1",
    "text": "1 1\n\npatent_assignee_organization &lt;- patent_assignee %&gt;%\n        left_join(assignee, by = c(\"assignee_id\" = \"id\")) \n\nno_of_patients_organizations = patent_assignee_organization %&gt;% group_by(organization) %&gt;% summarize(no_patents = n())\n\nno_of_patients_organizations = no_of_patients_organizations %&gt;% arrange(desc(no_patents))"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#section-1",
    "href": "content/01_journal/03_data_wrangling.html#section-1",
    "title": "Data Wrangling",
    "section": "\n2 2",
    "text": "2 2\n\nall_patents_august = patent_assignee_organization %&gt;% left_join(patent, by = c(\"patent_id\" = \"id\")) %&gt;% separate(col    = date,\n         into   = c(\"year\", \"month\", \"day\"),\n         sep    = \"-\") %&gt;% filter(month == '08') \n\nall_patents_august_grouped = all_patents_august %&gt;% group_by(organization) %&gt;% summarize(no_patents = n()) %&gt;%  arrange(desc(no_patents))\n\ntop10 = top_n(all_patents_august_grouped, 10)\n\n#&gt; Selecting by no_patents\n\ntop10$organization = as.factor(top10$organization)\n\nggplot(top10 , aes(x = reorder(organization, desc(no_patents)), y = no_patents)) + geom_col() + \n  labs(\n  title    = \"Top 10 companies in August\",\n  x = \"\",\n  y = \"No of Patents\"\n) + theme(axis.text.x = element_text(angle = 80, hjust = 1))"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html#section-2",
    "href": "content/01_journal/03_data_wrangling.html#section-2",
    "title": "Data Wrangling",
    "section": "\n3 3",
    "text": "3 3\n\ntop10 = top_n(no_of_patients_organizations, 10)\n\n#&gt; Selecting by no_patents\n\npatent_assignee_organization &lt;- patent_assignee %&gt;%\n        left_join(assignee, by = c(\"assignee_id\" = \"id\")) %&gt;%\n        left_join(uspc, by = c(\"patent_id\" = \"patent_id\")) \n\n#&gt; Warning in left_join(., uspc, by = c(patent_id = \"patent_id\")): Detected an unexpected many-to-many relationship between `x` and `y`.\n#&gt; ℹ Row 7 of `x` matches multiple rows in `y`.\n#&gt; ℹ Row 765116 of `y` matches multiple rows in `x`.\n#&gt; ℹ If a many-to-many relationship is expected, set `relationship =\n#&gt;   \"many-to-many\"` to silence this warning.\n\nno_of_patients_organizations = patent_assignee_organization %&gt;% \n  filter(organization %in% top10$organization) %&gt;% \n  group_by(mainclass_id) %&gt;% \n  summarize(no_patents = n()) \n\ntop5 = no_of_patients_organizations %&gt;% arrange(desc(no_patents)) %&gt;% top_n(5)\n\n#&gt; Selecting by no_patents\n\ntop5"
  }
]