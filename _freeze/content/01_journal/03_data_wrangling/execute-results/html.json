{
  "hash": "0c49e7a8e6c560899adfc9c9598757d6",
  "result": {
    "markdown": "---\ntitle: \"Data Wrangling\"\nauthor: \"Seyed Hojat Naghavi\"\n---\n\n::: {.cell hash='03_data_wrangling_cache/html/unnamed-chunk-1_5eaccfae7c756630b66359346b71b741'}\n\n```{.r .cell-code}\nlibrary(vroom)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.4     ✔ readr     2.1.5\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.1\n#> ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n#> ✔ purrr     1.0.2     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ readr::col_character()   masks vroom::col_character()\n#> ✖ readr::col_date()        masks vroom::col_date()\n#> ✖ readr::col_datetime()    masks vroom::col_datetime()\n#> ✖ readr::col_double()      masks vroom::col_double()\n#> ✖ readr::col_factor()      masks vroom::col_factor()\n#> ✖ readr::col_guess()       masks vroom::col_guess()\n#> ✖ readr::col_integer()     masks vroom::col_integer()\n#> ✖ readr::col_logical()     masks vroom::col_logical()\n#> ✖ readr::col_number()      masks vroom::col_number()\n#> ✖ readr::col_skip()        masks vroom::col_skip()\n#> ✖ readr::col_time()        masks vroom::col_time()\n#> ✖ readr::cols()            masks vroom::cols()\n#> ✖ readr::date_names_lang() masks vroom::date_names_lang()\n#> ✖ readr::default_locale()  masks vroom::default_locale()\n#> ✖ dplyr::filter()          masks stats::filter()\n#> ✖ readr::fwf_cols()        masks vroom::fwf_cols()\n#> ✖ readr::fwf_empty()       masks vroom::fwf_empty()\n#> ✖ readr::fwf_positions()   masks vroom::fwf_positions()\n#> ✖ readr::fwf_widths()      masks vroom::fwf_widths()\n#> ✖ dplyr::lag()             masks stats::lag()\n#> ✖ readr::locale()          masks vroom::locale()\n#> ✖ readr::output_column()   masks vroom::output_column()\n#> ✖ readr::problems()        masks vroom::problems()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\ncol_types <- list(\n  id = col_character(),\n  type = col_character(),\n  number = col_character(),\n  country = col_character(),\n  date = col_date(\"%Y-%m-%d\"),\n  abstract = col_character(),\n  title = col_character(),\n  kind = col_character(),\n  num_claims = col_double(),\n  filename = col_character(),\n  withdrawn = col_double()\n)\n\npatent <- vroom(\n            file       = \"../../../ds_data/patent.tsv\", \n            delim      = \"\\t\", \n            col_types  = col_types,\n            na         = c(\"\", \"NA\", \"NULL\")\n        )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: The following named parsers don't match the column names: type,\n#> number, country, abstract, title, kind, filename, withdrawn\n```\n:::\n\n```{.r .cell-code}\ncol_types <- list(\n  id = col_character(),\n  type = col_character(),\n  organization = col_character()\n)\n\nassignee <- vroom(\n            file       = \"../../../ds_data/assignee.tsv\", \n            delim      = \"\\t\", \n            col_types  = col_types,\n            na         = c(\"\", \"NA\", \"NULL\")\n        )\n\ncol_types <- list(\n  patent_id = col_character(),\n  assignee_id = col_character()\n)\n\npatent_assignee <- vroom(\n            file       = \"../../../ds_data/patent_assignee.tsv\", \n            delim      = \"\\t\", \n            col_types  = col_types,\n            na         = c(\"\", \"NA\", \"NULL\")\n        )\n\ncol_types <- list(\n  patent_id = col_character(),\n  mainclass_id = col_character(),\n  sequence = col_character()\n)\n\nuspc <- vroom(\n            file       = \"../../../ds_data/uspc.tsv\", \n            delim      = \"\\t\", \n            col_types  = col_types,\n            na         = c(\"\", \"NA\", \"NULL\")\n        )\n```\n:::\n\n\n## 1\n\n::: {.cell hash='03_data_wrangling_cache/html/unnamed-chunk-2_75a49c279d808e73a8d2c0e89b07fbe8'}\n\n```{.r .cell-code}\npatent_assignee_organization <- patent_assignee %>%\n        left_join(assignee, by = c(\"assignee_id\" = \"id\")) \n\nno_of_patients_organizations = patent_assignee_organization %>% group_by(organization) %>% summarize(no_patents = n())\n\nno_of_patients_organizations = no_of_patients_organizations %>% arrange(desc(no_patents))\n```\n:::\n\n\n## 2\n\n::: {.cell hash='03_data_wrangling_cache/html/unnamed-chunk-3_86710b7dd962a8b6564b10e88d9fc3f5'}\n\n```{.r .cell-code}\nall_patents_august = patent_assignee_organization %>% left_join(patent, by = c(\"patent_id\" = \"id\")) %>% separate(col    = date,\n         into   = c(\"year\", \"month\", \"day\"),\n         sep    = \"-\") %>% filter(month == '08') \n\nall_patents_august_grouped = all_patents_august %>% group_by(organization) %>% summarize(no_patents = n()) %>%  arrange(desc(no_patents))\n\ntop10 = top_n(all_patents_august_grouped, 10)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Selecting by no_patents\n```\n:::\n\n```{.r .cell-code}\ntop10$organization = as.factor(top10$organization)\n\nggplot(top10 , aes(x = reorder(organization, desc(no_patents)), y = no_patents)) + geom_col() + \n  labs(\n  title    = \"Top 10 companies in August\",\n  x = \"\",\n  y = \"No of Patents\"\n) + theme(axis.text.x = element_text(angle = 80, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](03_data_wrangling_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## 3\n\n::: {.cell hash='03_data_wrangling_cache/html/unnamed-chunk-4_f8379b4bf42747784eeccfb2e256fdcb'}\n\n```{.r .cell-code}\ntop10 = top_n(no_of_patients_organizations, 10)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Selecting by no_patents\n```\n:::\n\n```{.r .cell-code}\npatent_assignee_organization <- patent_assignee %>%\n        left_join(assignee, by = c(\"assignee_id\" = \"id\")) %>%\n        left_join(uspc, by = c(\"patent_id\" = \"patent_id\")) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning in left_join(., uspc, by = c(patent_id = \"patent_id\")): Detected an unexpected many-to-many relationship between `x` and `y`.\n#> ℹ Row 7 of `x` matches multiple rows in `y`.\n#> ℹ Row 765116 of `y` matches multiple rows in `x`.\n#> ℹ If a many-to-many relationship is expected, set `relationship =\n#>   \"many-to-many\"` to silence this warning.\n```\n:::\n\n```{.r .cell-code}\nno_of_patients_organizations = patent_assignee_organization %>% \n  filter(organization %in% top10$organization) %>% \n  group_by(mainclass_id) %>% \n  summarize(no_patents = n()) \n\ntop5 = no_of_patients_organizations %>% arrange(desc(no_patents)) %>% top_n(5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Selecting by no_patents\n```\n:::\n\n```{.r .cell-code}\ntop5\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"mainclass_id\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"no_patents\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"NA\",\"2\":\"8759\"},{\"1\":\"257\",\"2\":\"7396\"},{\"1\":\"455\",\"2\":\"6119\"},{\"1\":\"370\",\"2\":\"5293\"},{\"1\":\"709\",\"2\":\"4014\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}